
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.*;
import analisis.arbolSintactico.*;
import informacion.TipoIdentificador;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\334\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\011\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\004\000\002\006\004\000\002\007\011\000\002" +
    "\007\012\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\007" +
    "\000\002\010\007\000\002\011\003\000\002\011\005\000" +
    "\002\012\005\000\002\012\006\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\003\000\002\014\005\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\004\000\002\020\004\000\002\021" +
    "\004\000\002\022\004\000\002\023\004\000\002\024\007" +
    "\000\002\025\007\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\036\006\000\002\036\006" +
    "\000\002\036\006\000\002\036\006\000\002\036\006\000" +
    "\002\036\006\000\002\036\006\000\002\036\006\000\002" +
    "\036\006\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\042" +
    "\011\000\002\042\015\000\002\043\011\000\002\044\012" +
    "\000\002\044\012\000\002\044\012\000\002\044\012\000" +
    "\002\044\012\000\002\045\006\000\002\045\007\000\002" +
    "\046\006\000\002\046\007\000\002\047\006\000\002\047" +
    "\007\000\002\050\006\000\002\050\007\000\002\051\006" +
    "\000\002\051\007\000\002\052\005\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\054\005\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\005\000\002\057\004\000\002\057" +
    "\004\000\002\057\004\000\002\060\003\000\002\060\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\005\000\002\062\005\000\002" +
    "\062\005\000\002\062\005\000\002\062\005\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\005\000\002\064\003\000\002\064\003\000\002\065" +
    "\005\000\002\065\004\000\002\065\004\000\002\065\006" +
    "\000\002\065\006\000\002\066\003\000\002\066\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\005\000\002\067\005\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\071\006" +
    "\000\002\072\003\000\002\072\003\000\002\074\005\000" +
    "\002\073\003\000\002\073\003\000\002\075\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0177\000\004\021\006\001\002\000\004\002\000\001" +
    "\002\000\012\002\uffff\017\u0156\020\u0157\021\u015a\001\002" +
    "\000\004\011\011\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\004\026\012\001\002\000\004" +
    "\027\013\001\002\000\004\030\014\001\002\000\056\003" +
    "\045\004\060\010\041\012\053\013\044\014\062\015\072" +
    "\016\101\017\046\020\076\021\061\022\030\023\066\024" +
    "\043\025\111\026\107\041\051\050\036\062\104\063\067" +
    "\064\057\067\025\001\002\000\004\034\uffce\001\002\000" +
    "\040\037\u014c\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b" +
    "\045\uff5b\051\uff40\052\uff40\053\uff40\054\uff40\055\uff40\056" +
    "\uff40\057\uff4f\060\uff4f\001\002\000\004\034\uffc2\001\002" +
    "\000\064\003\uff82\004\uff82\005\uff82\006\uff82\010\uff82\012" +
    "\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82" +
    "\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026\uff82\031" +
    "\uff82\041\uff82\050\uff82\062\uff82\063\uff82\064\uff82\067\uff82" +
    "\001\002\000\036\040\uff5f\041\uff5f\042\uff5f\043\uff5f\044" +
    "\uff5f\045\uff5f\051\uff43\052\uff43\053\uff43\054\uff43\055\uff43" +
    "\056\uff43\057\uff52\060\uff52\001\002\000\064\003\045\004" +
    "\060\005\ufff9\006\ufff9\010\041\012\053\013\044\014\062" +
    "\015\072\016\101\017\046\020\076\021\061\022\030\023" +
    "\066\024\043\025\111\026\107\031\ufff9\041\051\050\036" +
    "\062\104\063\067\064\057\067\025\001\002\000\006\034" +
    "\uffd2\037\u0145\001\002\000\006\057\u0143\060\u0142\001\002" +
    "\000\050\026\141\032\140\037\u0137\040\uff5d\041\uff5d\042" +
    "\uff5d\043\uff5d\044\uff5d\045\uff5d\046\uff34\047\uff34\051\uff34" +
    "\052\uff34\053\uff34\054\uff34\055\uff34\056\uff34\057\uff51\060" +
    "\uff51\001\002\000\004\034\uffc3\001\002\000\044\027\uff27" +
    "\034\uff27\036\uff27\040\uff27\041\uff27\042\uff27\043\uff27\044" +
    "\uff27\045\uff27\046\uff27\047\uff27\051\uff27\052\uff27\053\uff27" +
    "\054\uff27\055\uff27\056\uff27\001\002\000\004\067\u0136\001" +
    "\002\000\004\031\u0135\001\002\000\004\034\u0134\001\002" +
    "\000\030\027\uff67\034\uff67\036\uff67\046\uff32\047\uff32\051" +
    "\uff32\052\uff32\053\uff32\054\uff32\055\uff32\056\uff32\001\002" +
    "\000\024\027\uff6a\034\uff6a\036\uff6a\040\uff5a\041\uff5a\042" +
    "\uff5a\043\uff5a\044\uff5a\045\uff5a\001\002\000\016\051\243" +
    "\052\246\053\245\054\241\055\244\056\237\001\002\000" +
    "\010\026\u012e\064\u012f\067\u012d\001\002\000\004\034\u012c" +
    "\001\002\000\004\034\uffcf\001\002\000\004\026\u0122\001" +
    "\002\000\004\034\uffc4\001\002\000\004\026\u0120\001\002" +
    "\000\022\023\066\024\043\026\120\041\051\062\104\063" +
    "\067\065\u0118\067\u011a\001\002\000\004\034\u0117\001\002" +
    "\000\004\067\u0113\001\002\000\006\034\uffd3\037\u010c\001" +
    "\002\000\006\034\uffd0\037\u0108\001\002\000\016\023\066" +
    "\024\043\026\u0100\062\104\063\067\067\u0105\001\002\000" +
    "\040\027\uff69\034\uff69\036\uff69\040\uff59\041\uff59\042\uff59" +
    "\043\uff59\044\uff59\045\uff59\051\uff3e\052\uff3e\053\uff3e\054" +
    "\uff3e\055\uff3e\056\uff3e\001\002\000\030\027\uff3d\034\uff3d" +
    "\036\uff3d\046\uff3d\047\uff3d\051\uff3d\052\uff3d\053\uff3d\054" +
    "\uff3d\055\uff3d\056\uff3d\001\002\000\004\034\uffc6\001\002" +
    "\000\004\034\376\001\002\000\004\034\375\001\002\000" +
    "\030\027\uff35\034\uff35\036\uff35\046\uff35\047\uff35\051\uff35" +
    "\052\uff35\053\uff35\054\uff35\055\uff35\056\uff35\001\002\000" +
    "\004\034\374\001\002\000\004\067\370\001\002\000\004" +
    "\026\310\001\002\000\064\003\uff84\004\uff84\005\uff84\006" +
    "\uff84\010\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84" +
    "\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025" +
    "\uff84\026\uff84\031\uff84\041\uff84\050\uff84\062\uff84\063\uff84" +
    "\064\uff84\067\uff84\001\002\000\064\003\uff83\004\uff83\005" +
    "\uff83\006\uff83\010\uff83\012\uff83\013\uff83\014\uff83\015\uff83" +
    "\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024" +
    "\uff83\025\uff83\026\uff83\031\uff83\041\uff83\050\uff83\062\uff83" +
    "\063\uff83\064\uff83\067\uff83\001\002\000\040\034\307\040" +
    "\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\051\uff41" +
    "\052\uff41\053\uff41\054\uff41\055\uff41\056\uff41\057\uff50\060" +
    "\uff50\001\002\000\004\026\305\001\002\000\044\027\uff28" +
    "\034\uff28\036\uff28\040\uff28\041\uff28\042\uff28\043\uff28\044" +
    "\uff28\045\uff28\046\uff28\047\uff28\051\uff28\052\uff28\053\uff28" +
    "\054\uff28\055\uff28\056\uff28\001\002\000\004\034\uffc5\001" +
    "\002\000\030\027\uff68\034\uff68\036\uff68\046\uff33\047\uff33" +
    "\051\uff33\052\uff33\053\uff33\054\uff33\055\uff33\056\uff33\001" +
    "\002\000\004\026\273\001\002\000\004\034\272\001\002" +
    "\000\022\046\240\047\247\051\243\052\246\053\245\054" +
    "\241\055\244\056\237\001\002\000\004\034\236\001\002" +
    "\000\004\067\235\001\002\000\016\040\225\041\227\042" +
    "\231\043\230\044\226\045\232\001\002\000\064\003\045" +
    "\004\060\005\ufffa\006\ufffa\010\041\012\053\013\044\014" +
    "\062\015\072\016\101\017\046\020\076\021\061\022\030" +
    "\023\066\024\043\025\111\026\107\031\ufffa\041\051\050" +
    "\036\062\104\063\067\064\057\067\025\001\002\000\004" +
    "\067\222\001\002\000\006\034\uffd4\037\212\001\002\000" +
    "\006\034\uffd1\037\204\001\002\000\050\027\uff2b\034\uff2b" +
    "\036\uff2b\040\uff2b\041\uff2b\042\uff2b\043\uff2b\044\uff2b\045" +
    "\uff2b\046\uff2b\047\uff2b\051\uff2b\052\uff2b\053\uff2b\054\uff2b" +
    "\055\uff2b\056\uff2b\057\uff2b\060\uff2b\001\002\000\032\040" +
    "\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\051\uff42" +
    "\052\uff42\053\uff42\054\uff42\055\uff42\056\uff42\001\002\000" +
    "\004\034\203\001\002\000\026\012\053\023\066\024\043" +
    "\026\107\041\051\050\036\062\104\063\067\064\057\067" +
    "\172\001\002\000\050\027\uff2a\034\uff2a\036\uff2a\040\uff2a" +
    "\041\uff2a\042\uff2a\043\uff2a\044\uff2a\045\uff2a\046\uff2a\047" +
    "\uff2a\051\uff2a\052\uff2a\053\uff2a\054\uff2a\055\uff2a\056\uff2a" +
    "\057\uff2a\060\uff2a\001\002\000\004\026\112\001\002\000" +
    "\024\023\066\024\043\026\120\041\051\062\104\063\067" +
    "\065\113\066\116\067\115\001\002\000\004\027\170\001" +
    "\002\000\020\027\167\040\uff5a\041\uff5a\042\uff5a\043\uff5a" +
    "\044\uff5a\045\uff5a\001\002\000\030\026\141\027\166\032" +
    "\140\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045\uff5d" +
    "\057\uff51\060\uff51\001\002\000\004\027\165\001\002\000" +
    "\024\027\164\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c" +
    "\045\uff5c\057\uff50\060\uff50\001\002\000\020\023\066\024" +
    "\043\026\120\041\051\062\104\063\067\067\137\001\002" +
    "\000\020\027\130\040\uff59\041\uff59\042\uff59\043\uff59\044" +
    "\uff59\045\uff59\001\002\000\024\027\127\040\uff5f\041\uff5f" +
    "\042\uff5f\043\uff5f\044\uff5f\045\uff5f\057\uff52\060\uff52\001" +
    "\002\000\024\027\126\040\uff5b\041\uff5b\042\uff5b\043\uff5b" +
    "\044\uff5b\045\uff5b\057\uff4f\060\uff4f\001\002\000\020\027" +
    "\125\040\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e" +
    "\001\002\000\004\034\uff94\001\002\000\004\034\uff8f\001" +
    "\002\000\004\034\uff95\001\002\000\004\034\uff8d\001\002" +
    "\000\030\027\uff5b\034\uff5b\036\uff5b\040\uff5b\041\uff5b\042" +
    "\uff5b\043\uff5b\044\uff5b\045\uff5b\057\uff4f\060\uff4f\001\002" +
    "\000\024\027\uff59\034\uff59\036\uff59\040\uff59\041\uff59\042" +
    "\uff59\043\uff59\044\uff59\045\uff59\001\002\000\020\027\163" +
    "\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045\uff5a\001" +
    "\002\000\024\027\uff5e\034\uff5e\036\uff5e\040\uff5e\041\uff5e" +
    "\042\uff5e\043\uff5e\044\uff5e\045\uff5e\001\002\000\030\027" +
    "\uff5c\034\uff5c\036\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c" +
    "\044\uff5c\045\uff5c\057\uff50\060\uff50\001\002\000\030\027" +
    "\uff5f\034\uff5f\036\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f" +
    "\044\uff5f\045\uff5f\057\uff52\060\uff52\001\002\000\034\026" +
    "\141\027\uff5d\032\140\034\uff5d\036\uff5d\040\uff5d\041\uff5d" +
    "\042\uff5d\043\uff5d\044\uff5d\045\uff5d\057\uff51\060\uff51\001" +
    "\002\000\004\062\161\001\002\000\034\012\053\023\066" +
    "\024\043\026\107\027\150\041\051\050\036\062\104\063" +
    "\067\064\146\065\143\066\147\067\144\001\002\000\006" +
    "\027\uffe1\036\uffe1\001\002\000\006\027\uffe6\036\uffe6\001" +
    "\002\000\052\026\141\027\uffe4\032\140\036\uffe4\040\uff5d" +
    "\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045\uff5d\046\uff34\047" +
    "\uff34\051\uff34\052\uff34\053\uff34\054\uff34\055\uff34\056\uff34" +
    "\057\uff51\060\uff51\001\002\000\004\027\160\001\002\000" +
    "\026\027\uffe7\036\uffe7\046\uff35\047\uff35\051\uff35\052\uff35" +
    "\053\uff35\054\uff35\055\uff35\056\uff35\001\002\000\006\027" +
    "\uffe5\036\uffe5\001\002\000\050\027\uffeb\034\uffeb\036\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\057\uffeb\060\uffeb\001\002\000\042\027\uffe3\036" +
    "\uffe3\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c" +
    "\051\uff41\052\uff41\053\uff41\054\uff41\055\uff41\056\uff41\057" +
    "\uff50\060\uff50\001\002\000\042\027\uffe2\036\uffe2\040\uff5b" +
    "\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b\051\uff40\052" +
    "\uff40\053\uff40\054\uff40\055\uff40\056\uff40\057\uff4f\060\uff4f" +
    "\001\002\000\042\027\uffe9\036\uffe9\040\uff5f\041\uff5f\042" +
    "\uff5f\043\uff5f\044\uff5f\045\uff5f\051\uff43\052\uff43\053\uff43" +
    "\054\uff43\055\uff43\056\uff43\057\uff52\060\uff52\001\002\000" +
    "\006\027\uffe0\036\156\001\002\000\036\027\uffe8\036\uffe8" +
    "\040\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\051" +
    "\uff42\052\uff42\053\uff42\054\uff42\055\uff42\056\uff42\001\002" +
    "\000\032\012\053\023\066\024\043\026\107\041\051\050" +
    "\036\062\104\063\067\064\146\065\143\066\147\067\144" +
    "\001\002\000\004\027\uffdf\001\002\000\050\027\uffea\034" +
    "\uffea\036\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea" +
    "\045\uffea\046\uffea\047\uffea\051\uffea\052\uffea\053\uffea\054" +
    "\uffea\055\uffea\056\uffea\057\uffea\060\uffea\001\002\000\004" +
    "\033\162\001\002\000\052\027\uff2c\034\uff2c\036\uff2c\037" +
    "\uff2c\040\uff2c\041\uff2c\042\uff2c\043\uff2c\044\uff2c\045\uff2c" +
    "\046\uff2c\047\uff2c\051\uff2c\052\uff2c\053\uff2c\054\uff2c\055" +
    "\uff2c\056\uff2c\057\uff2c\060\uff2c\001\002\000\030\027\uff58" +
    "\034\uff58\036\uff58\040\uff58\041\uff58\042\uff58\043\uff58\044" +
    "\uff58\045\uff58\057\uff4e\060\uff4e\001\002\000\004\034\uff90" +
    "\001\002\000\004\034\uff92\001\002\000\004\034\uff91\001" +
    "\002\000\004\034\uff8e\001\002\000\004\034\uff93\001\002" +
    "\000\020\027\202\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044" +
    "\uff5a\045\uff5a\001\002\000\046\026\141\032\140\040\uff5d" +
    "\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045\uff5d\046\uff34\047" +
    "\uff34\051\uff34\052\uff34\053\uff34\054\uff34\055\uff34\056\uff34" +
    "\057\uff51\060\uff51\001\002\000\036\040\uff5c\041\uff5c\042" +
    "\uff5c\043\uff5c\044\uff5c\045\uff5c\051\uff41\052\uff41\053\uff41" +
    "\054\uff41\055\uff41\056\uff41\057\uff50\060\uff50\001\002\000" +
    "\032\040\uff59\041\uff59\042\uff59\043\uff59\044\uff59\045\uff59" +
    "\051\uff3e\052\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e\001" +
    "\002\000\036\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b" +
    "\045\uff5b\051\uff40\052\uff40\053\uff40\054\uff40\055\uff40\056" +
    "\uff40\057\uff4f\060\uff4f\001\002\000\024\027\201\046\uff33" +
    "\047\uff33\051\uff33\052\uff33\053\uff33\054\uff33\055\uff33\056" +
    "\uff33\001\002\000\024\027\200\046\uff32\047\uff32\051\uff32" +
    "\052\uff32\053\uff32\054\uff32\055\uff32\056\uff32\001\002\000" +
    "\030\027\uff30\034\uff30\036\uff30\046\uff30\047\uff30\051\uff30" +
    "\052\uff30\053\uff30\054\uff30\055\uff30\056\uff30\001\002\000" +
    "\030\027\uff31\034\uff31\036\uff31\046\uff31\047\uff31\051\uff31" +
    "\052\uff31\053\uff31\054\uff31\055\uff31\056\uff31\001\002\000" +
    "\036\040\uff58\041\uff58\042\uff58\043\uff58\044\uff58\045\uff58" +
    "\051\uff3f\052\uff3f\053\uff3f\054\uff3f\055\uff3f\056\uff3f\057" +
    "\uff4e\060\uff4e\001\002\000\064\003\uffdb\004\uffdb\005\uffdb" +
    "\006\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\031\uffdb\041\uffdb\050\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\067\uffdb\001\002\000\010\012\210\065\205" +
    "\067\206\001\002\000\004\034\uffaf\001\002\000\010\026" +
    "\141\032\140\034\uffae\001\002\000\004\034\uffad\001\002" +
    "\000\004\034\uffab\001\002\000\004\034\uffac\001\002\000" +
    "\022\012\221\023\066\024\043\026\120\041\051\062\104" +
    "\063\067\067\214\001\002\000\020\034\uffbd\040\uff5a\041" +
    "\uff5a\042\uff5a\043\uff5a\044\uff5a\045\uff5a\001\002\000\030" +
    "\026\141\032\140\034\uffc0\040\uff5d\041\uff5d\042\uff5d\043" +
    "\uff5d\044\uff5d\045\uff5d\057\uff51\060\uff51\001\002\000\024" +
    "\034\uffbf\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045" +
    "\uff5c\057\uff50\060\uff50\001\002\000\024\034\uffc1\040\uff5f" +
    "\041\uff5f\042\uff5f\043\uff5f\044\uff5f\045\uff5f\057\uff52\060" +
    "\uff52\001\002\000\020\034\uffbc\040\uff59\041\uff59\042\uff59" +
    "\043\uff59\044\uff59\045\uff59\001\002\000\024\034\uffbe\040" +
    "\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b\057\uff4f" +
    "\060\uff4f\001\002\000\004\034\uffbb\001\002\000\006\034" +
    "\uffcb\037\uffcb\001\002\000\010\005\ufff8\006\ufff8\031\ufff8" +
    "\001\002\000\020\023\066\024\043\026\120\041\051\062" +
    "\104\063\067\067\137\001\002\000\020\023\uff65\024\uff65" +
    "\026\uff65\041\uff65\062\uff65\063\uff65\067\uff65\001\002\000" +
    "\020\023\uff60\024\uff60\026\uff60\041\uff60\062\uff60\063\uff60" +
    "\067\uff60\001\002\000\020\023\uff64\024\uff64\026\uff64\041" +
    "\uff64\062\uff64\063\uff64\067\uff64\001\002\000\020\023\uff63" +
    "\024\uff63\026\uff63\041\uff63\062\uff63\063\uff63\067\uff63\001" +
    "\002\000\020\023\uff62\024\uff62\026\uff62\041\uff62\062\uff62" +
    "\063\uff62\067\uff62\001\002\000\020\023\uff61\024\uff61\026" +
    "\uff61\041\uff61\062\uff61\063\uff61\067\uff61\001\002\000\024" +
    "\027\uff5a\034\uff5a\036\uff5a\040\uff5a\041\uff5a\042\uff5a\043" +
    "\uff5a\044\uff5a\045\uff5a\001\002\000\024\027\uff66\034\uff66" +
    "\036\uff66\040\225\041\227\042\231\043\230\044\226\045" +
    "\232\001\002\000\006\034\uffcc\037\uffcc\001\002\000\064" +
    "\003\uffda\004\uffda\005\uffda\006\uffda\010\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\031\uffda\041" +
    "\uffda\050\uffda\062\uffda\063\uffda\064\uffda\067\uffda\001\002" +
    "\000\026\012\uff46\023\uff46\024\uff46\026\uff46\041\uff46\050" +
    "\uff46\062\uff46\063\uff46\064\uff46\067\uff46\001\002\000\026" +
    "\012\uff37\023\uff37\024\uff37\026\uff37\041\uff37\050\uff37\062" +
    "\uff37\063\uff37\064\uff37\067\uff37\001\002\000\026\012\uff48" +
    "\023\uff48\024\uff48\026\uff48\041\uff48\050\uff48\062\uff48\063" +
    "\uff48\064\uff48\067\uff48\001\002\000\026\012\053\023\066" +
    "\024\043\026\254\041\051\050\036\062\104\063\067\064" +
    "\057\067\251\001\002\000\026\012\uff45\023\uff45\024\uff45" +
    "\026\uff45\041\uff45\050\uff45\062\uff45\063\uff45\064\uff45\067" +
    "\uff45\001\002\000\026\012\uff47\023\uff47\024\uff47\026\uff47" +
    "\041\uff47\050\uff47\062\uff47\063\uff47\064\uff47\067\uff47\001" +
    "\002\000\026\012\uff49\023\uff49\024\uff49\026\uff49\041\uff49" +
    "\050\uff49\062\uff49\063\uff49\064\uff49\067\uff49\001\002\000" +
    "\026\012\uff44\023\uff44\024\uff44\026\uff44\041\uff44\050\uff44" +
    "\062\uff44\063\uff44\064\uff44\067\uff44\001\002\000\026\012" +
    "\uff36\023\uff36\024\uff36\026\uff36\041\uff36\050\uff36\062\uff36" +
    "\063\uff36\064\uff36\067\uff36\001\002\000\026\012\053\023" +
    "\066\024\043\026\254\041\051\050\036\062\104\063\067" +
    "\064\057\067\251\001\002\000\040\026\141\027\uff34\032" +
    "\140\034\uff34\036\uff34\046\uff34\047\uff34\051\uff34\052\uff34" +
    "\053\uff34\054\uff34\055\uff34\056\uff34\057\uff51\060\uff51\001" +
    "\002\000\030\027\uff4b\034\uff4b\036\uff4b\046\uff4b\047\uff4b" +
    "\051\243\052\246\053\245\054\241\055\244\056\237\001" +
    "\002\000\034\027\uff41\034\uff41\036\uff41\046\uff41\047\uff41" +
    "\051\uff41\052\uff41\053\uff41\054\uff41\055\uff41\056\uff41\057" +
    "\uff50\060\uff50\001\002\000\026\012\053\023\066\024\043" +
    "\026\107\041\051\050\036\062\104\063\067\064\057\067" +
    "\172\001\002\000\034\027\uff43\034\uff43\036\uff43\046\uff43" +
    "\047\uff43\051\uff43\052\uff43\053\uff43\054\uff43\055\uff43\056" +
    "\uff43\057\uff52\060\uff52\001\002\000\030\027\uff3e\034\uff3e" +
    "\036\uff3e\046\uff3e\047\uff3e\051\uff3e\052\uff3e\053\uff3e\054" +
    "\uff3e\055\uff3e\056\uff3e\001\002\000\034\027\uff40\034\uff40" +
    "\036\uff40\046\uff40\047\uff40\051\uff40\052\uff40\053\uff40\054" +
    "\uff40\055\uff40\056\uff40\057\uff4f\060\uff4f\001\002\000\030" +
    "\027\uff4a\034\uff4a\036\uff4a\046\240\047\247\051\243\052" +
    "\246\053\245\054\241\055\244\056\237\001\002\000\030" +
    "\027\uff33\034\uff33\036\uff33\046\uff33\047\uff33\051\uff33\052" +
    "\uff33\053\uff33\054\uff33\055\uff33\056\uff33\001\002\000\030" +
    "\027\uff42\034\uff42\036\uff42\046\uff42\047\uff42\051\uff42\052" +
    "\uff42\053\uff42\054\uff42\055\uff42\056\uff42\001\002\000\030" +
    "\027\uff32\034\uff32\036\uff32\046\uff32\047\uff32\051\uff32\052" +
    "\uff32\053\uff32\054\uff32\055\uff32\056\uff32\001\002\000\020" +
    "\027\265\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045" +
    "\uff5a\001\002\000\034\027\uff3f\034\uff3f\036\uff3f\046\uff3f" +
    "\047\uff3f\051\uff3f\052\uff3f\053\uff3f\054\uff3f\055\uff3f\056" +
    "\uff3f\057\uff4e\060\uff4e\001\002\000\026\012\053\023\066" +
    "\024\043\026\254\041\051\050\036\062\104\063\067\064" +
    "\057\067\251\001\002\000\030\027\uff4d\034\uff4d\036\uff4d" +
    "\046\uff4d\047\uff4d\051\243\052\246\053\245\054\241\055" +
    "\244\056\237\001\002\000\030\027\uff4c\034\uff4c\036\uff4c" +
    "\046\240\047\247\051\243\052\246\053\245\054\241\055" +
    "\244\056\237\001\002\000\030\027\uff3c\034\uff3c\036\uff3c" +
    "\046\240\047\247\051\243\052\246\053\245\054\241\055" +
    "\244\056\237\001\002\000\064\003\uffd8\004\uffd8\005\uffd8" +
    "\006\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\031\uffd8\041\uffd8\050\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\067\uffd8\001\002\000\026\012\053\023\066" +
    "\024\043\026\254\041\051\050\036\062\104\063\067\064" +
    "\276\067\275\001\002\000\004\027\301\001\002\000\034" +
    "\026\141\027\uff80\032\140\046\uff34\047\uff34\051\uff34\052" +
    "\uff34\053\uff34\054\uff34\055\uff34\056\uff34\057\uff51\060\uff51" +
    "\001\002\000\024\027\uff81\046\uff35\047\uff35\051\uff35\052" +
    "\uff35\053\uff35\054\uff35\055\uff35\056\uff35\001\002\000\024" +
    "\027\uff7f\046\uff33\047\uff33\051\uff33\052\uff33\053\uff33\054" +
    "\uff33\055\uff33\056\uff33\001\002\000\024\027\uff7e\046\uff32" +
    "\047\uff32\051\uff32\052\uff32\053\uff32\054\uff32\055\uff32\056" +
    "\uff32\001\002\000\004\030\302\001\002\000\056\003\045" +
    "\004\060\010\041\012\053\013\044\014\062\015\072\016" +
    "\101\017\046\020\076\021\061\022\030\023\066\024\043" +
    "\025\111\026\107\041\051\050\036\062\104\063\067\064" +
    "\057\067\025\001\002\000\004\031\304\001\002\000\064" +
    "\003\uff7b\004\uff7b\005\uff7b\006\uff7b\010\uff7b\012\uff7b\013" +
    "\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b" +
    "\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\031\uff7b\041" +
    "\uff7b\050\uff7b\062\uff7b\063\uff7b\064\uff7b\067\uff7b\001\002" +
    "\000\004\027\306\001\002\000\050\027\uff29\034\uff29\036" +
    "\uff29\040\uff29\041\uff29\042\uff29\043\uff29\044\uff29\045\uff29" +
    "\046\uff29\047\uff29\051\uff29\052\uff29\053\uff29\054\uff29\055" +
    "\uff29\056\uff29\057\uff29\060\uff29\001\002\000\064\003\uffd9" +
    "\004\uffd9\005\uffd9\006\uffd9\010\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\031\uffd9\041\uffd9\050" +
    "\uffd9\062\uffd9\063\uffd9\064\uffd9\067\uffd9\001\002\000\004" +
    "\067\311\001\002\000\004\027\312\001\002\000\004\030" +
    "\313\001\002\000\004\005\317\001\002\000\004\006\322" +
    "\001\002\000\004\006\322\001\002\000\004\006\322\001" +
    "\002\000\014\062\332\063\333\064\334\065\331\066\335" +
    "\001\002\000\004\006\322\001\002\000\004\006\322\001" +
    "\002\000\004\035\325\001\002\000\004\031\324\001\002" +
    "\000\064\003\uff76\004\uff76\005\uff76\006\uff76\010\uff76\012" +
    "\uff76\013\uff76\014\uff76\015\uff76\016\uff76\017\uff76\020\uff76" +
    "\021\uff76\022\uff76\023\uff76\024\uff76\025\uff76\026\uff76\031" +
    "\uff76\041\uff76\050\uff76\062\uff76\063\uff76\064\uff76\067\uff76" +
    "\001\002\000\056\003\045\004\060\010\041\012\053\013" +
    "\044\014\062\015\072\016\101\017\046\020\076\021\061" +
    "\022\030\023\066\024\043\025\111\026\107\041\051\050" +
    "\036\062\104\063\067\064\057\067\025\001\002\000\004" +
    "\031\uff6b\001\002\000\004\031\330\001\002\000\064\003" +
    "\uff78\004\uff78\005\uff78\006\uff78\010\uff78\012\uff78\013\uff78" +
    "\014\uff78\015\uff78\016\uff78\017\uff78\020\uff78\021\uff78\022" +
    "\uff78\023\uff78\024\uff78\025\uff78\026\uff78\031\uff78\041\uff78" +
    "\050\uff78\062\uff78\063\uff78\064\uff78\067\uff78\001\002\000" +
    "\004\035\356\001\002\000\004\035\352\001\002\000\004" +
    "\035\346\001\002\000\004\035\342\001\002\000\004\035" +
    "\336\001\002\000\056\003\045\004\060\010\041\012\053" +
    "\013\044\014\062\015\072\016\101\017\046\020\076\021" +
    "\061\022\030\023\066\024\043\025\111\026\107\041\051" +
    "\050\036\062\104\063\067\064\057\067\025\001\002\000" +
    "\006\005\340\006\uff6d\001\002\000\004\066\335\001\002" +
    "\000\004\006\uff6c\001\002\000\056\003\045\004\060\010" +
    "\041\012\053\013\044\014\062\015\072\016\101\017\046" +
    "\020\076\021\061\022\030\023\066\024\043\025\111\026" +
    "\107\041\051\050\036\062\104\063\067\064\057\067\025" +
    "\001\002\000\006\005\345\006\uff71\001\002\000\004\006" +
    "\uff70\001\002\000\004\064\334\001\002\000\056\003\045" +
    "\004\060\010\041\012\053\013\044\014\062\015\072\016" +
    "\101\017\046\020\076\021\061\022\030\023\066\024\043" +
    "\025\111\026\107\041\051\050\036\062\104\063\067\064" +
    "\057\067\025\001\002\000\006\005\351\006\uff73\001\002" +
    "\000\004\006\uff72\001\002\000\004\063\333\001\002\000" +
    "\056\003\045\004\060\010\041\012\053\013\044\014\062" +
    "\015\072\016\101\017\046\020\076\021\061\022\030\023" +
    "\066\024\043\025\111\026\107\041\051\050\036\062\104" +
    "\063\067\064\057\067\025\001\002\000\006\005\355\006" +
    "\uff75\001\002\000\004\006\uff74\001\002\000\004\062\332" +
    "\001\002\000\056\003\045\004\060\010\041\012\053\013" +
    "\044\014\062\015\072\016\101\017\046\020\076\021\061" +
    "\022\030\023\066\024\043\025\111\026\107\041\051\050" +
    "\036\062\104\063\067\064\057\067\025\001\002\000\006" +
    "\005\361\006\uff6f\001\002\000\004\006\uff6e\001\002\000" +
    "\004\065\331\001\002\000\004\031\363\001\002\000\064" +
    "\003\uff7a\004\uff7a\005\uff7a\006\uff7a\010\uff7a\012\uff7a\013" +
    "\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a" +
    "\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\031\uff7a\041" +
    "\uff7a\050\uff7a\062\uff7a\063\uff7a\064\uff7a\067\uff7a\001\002" +
    "\000\004\031\365\001\002\000\064\003\uff79\004\uff79\005" +
    "\uff79\006\uff79\010\uff79\012\uff79\013\uff79\014\uff79\015\uff79" +
    "\016\uff79\017\uff79\020\uff79\021\uff79\022\uff79\023\uff79\024" +
    "\uff79\025\uff79\026\uff79\031\uff79\041\uff79\050\uff79\062\uff79" +
    "\063\uff79\064\uff79\067\uff79\001\002\000\004\031\367\001" +
    "\002\000\064\003\uff77\004\uff77\005\uff77\006\uff77\010\uff77" +
    "\012\uff77\013\uff77\014\uff77\015\uff77\016\uff77\017\uff77\020" +
    "\uff77\021\uff77\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77" +
    "\031\uff77\041\uff77\050\uff77\062\uff77\063\uff77\064\uff77\067" +
    "\uff77\001\002\000\010\032\371\034\uffcd\037\uffcd\001\002" +
    "\000\004\062\372\001\002\000\004\033\373\001\002\000" +
    "\004\034\uffc8\001\002\000\064\003\uffd7\004\uffd7\005\uffd7" +
    "\006\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\031\uffd7\041\uffd7\050\uffd7\062\uffd7\063" +
    "\uffd7\064\uffd7\067\uffd7\001\002\000\064\003\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\031\uffd6\041\uffd6\050\uffd6\062" +
    "\uffd6\063\uffd6\064\uffd6\067\uffd6\001\002\000\064\003\uffde" +
    "\004\uffde\005\uffde\006\uffde\010\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\031\uffde\041\uffde\050" +
    "\uffde\062\uffde\063\uffde\064\uffde\067\uffde\001\002\000\044" +
    "\027\uff4f\034\uff4f\036\uff4f\040\uff4f\041\uff4f\042\uff4f\043" +
    "\uff4f\044\uff4f\045\uff4f\046\uff4f\047\uff4f\051\uff4f\052\uff4f" +
    "\053\uff4f\054\uff4f\055\uff4f\056\uff4f\001\002\000\020\023" +
    "\066\024\043\026\120\041\051\062\104\063\067\067\137" +
    "\001\002\000\044\027\uff55\034\uff55\036\uff55\040\uff55\041" +
    "\uff55\042\uff55\043\uff55\044\uff55\045\uff55\046\uff55\047\uff55" +
    "\051\uff55\052\uff55\053\uff55\054\uff55\055\uff55\056\uff55\001" +
    "\002\000\044\027\uff50\034\uff50\036\uff50\040\uff50\041\uff50" +
    "\042\uff50\043\uff50\044\uff50\045\uff50\046\uff50\047\uff50\051" +
    "\uff50\052\uff50\053\uff50\054\uff50\055\uff50\056\uff50\001\002" +
    "\000\044\027\uff52\034\uff52\036\uff52\040\uff52\041\uff52\042" +
    "\uff52\043\uff52\044\uff52\045\uff52\046\uff52\047\uff52\051\uff52" +
    "\052\uff52\053\uff52\054\uff52\055\uff52\056\uff52\001\002\000" +
    "\044\027\uff56\034\uff56\036\uff56\040\uff56\041\uff56\042\uff56" +
    "\043\uff56\044\uff56\045\uff56\046\uff56\047\uff56\051\uff56\052" +
    "\uff56\053\uff56\054\uff56\055\uff56\056\uff56\001\002\000\050" +
    "\026\141\027\uff51\032\140\034\uff51\036\uff51\040\uff51\041" +
    "\uff51\042\uff51\043\uff51\044\uff51\045\uff51\046\uff51\047\uff51" +
    "\051\uff51\052\uff51\053\uff51\054\uff51\055\uff51\056\uff51\001" +
    "\002\000\020\027\u0107\040\uff5a\041\uff5a\042\uff5a\043\uff5a" +
    "\044\uff5a\045\uff5a\001\002\000\044\027\uff4e\034\uff4e\036" +
    "\uff4e\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e\045\uff4e" +
    "\046\uff4e\047\uff4e\051\uff4e\052\uff4e\053\uff4e\054\uff4e\055" +
    "\uff4e\056\uff4e\001\002\000\010\012\u010a\066\u010b\067\u0109" +
    "\001\002\000\004\034\uffa9\001\002\000\004\034\uffa8\001" +
    "\002\000\004\034\uffaa\001\002\000\022\012\u0111\023\066" +
    "\024\043\026\120\041\051\062\104\063\067\067\u010e\001" +
    "\002\000\020\034\uffb7\040\uff5a\041\uff5a\042\uff5a\043\uff5a" +
    "\044\uff5a\045\uff5a\001\002\000\030\026\141\032\140\034" +
    "\uffb9\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045\uff5d" +
    "\057\uff51\060\uff51\001\002\000\024\034\uffb8\040\uff5c\041" +
    "\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\057\uff50\060\uff50" +
    "\001\002\000\020\034\uffb6\040\uff59\041\uff59\042\uff59\043" +
    "\uff59\044\uff59\045\uff59\001\002\000\004\034\uffb5\001\002" +
    "\000\020\034\uffba\040\uff5e\041\uff5e\042\uff5e\043\uff5e\044" +
    "\uff5e\045\uff5e\001\002\000\010\032\u0114\034\uffca\037\uffca" +
    "\001\002\000\004\062\u0115\001\002\000\004\033\u0116\001" +
    "\002\000\004\034\uffc7\001\002\000\064\003\uffd5\004\uffd5" +
    "\005\uffd5\006\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\031\uffd5\041\uffd5\050\uffd5\062" +
    "\uffd5\063\uffd5\064\uffd5\067\uffd5\001\002\000\004\034\uff8a" +
    "\001\002\000\020\034\uff86\040\uff5a\041\uff5a\042\uff5a\043" +
    "\uff5a\044\uff5a\045\uff5a\001\002\000\030\026\141\032\140" +
    "\034\uff89\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045" +
    "\uff5d\057\uff51\060\uff51\001\002\000\024\034\uff88\040\uff5c" +
    "\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\057\uff50\060" +
    "\uff50\001\002\000\024\034\uff8c\040\uff5f\041\uff5f\042\uff5f" +
    "\043\uff5f\044\uff5f\045\uff5f\057\uff52\060\uff52\001\002\000" +
    "\020\034\uff85\040\uff59\041\uff59\042\uff59\043\uff59\044\uff59" +
    "\045\uff59\001\002\000\024\034\uff87\040\uff5b\041\uff5b\042" +
    "\uff5b\043\uff5b\044\uff5b\045\uff5b\057\uff4f\060\uff4f\001\002" +
    "\000\020\034\uff8b\040\uff5e\041\uff5e\042\uff5e\043\uff5e\044" +
    "\uff5e\045\uff5e\001\002\000\004\027\u0121\001\002\000\044" +
    "\027\uff26\034\uff26\036\uff26\040\uff26\041\uff26\042\uff26\043" +
    "\uff26\044\uff26\045\uff26\046\uff26\047\uff26\051\uff26\052\uff26" +
    "\053\uff26\054\uff26\055\uff26\056\uff26\001\002\000\026\012" +
    "\053\023\066\024\043\026\254\041\051\050\036\062\104" +
    "\063\067\064\276\067\275\001\002\000\004\027\u0124\001" +
    "\002\000\004\030\u0125\001\002\000\056\003\045\004\060" +
    "\010\041\012\053\013\044\014\062\015\072\016\101\017" +
    "\046\020\076\021\061\022\030\023\066\024\043\025\111" +
    "\026\107\041\051\050\036\062\104\063\067\064\057\067" +
    "\025\001\002\000\004\031\u0127\001\002\000\066\003\uff7d" +
    "\004\uff7d\005\uff7d\006\uff7d\007\u0128\010\uff7d\012\uff7d\013" +
    "\uff7d\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d" +
    "\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\031\uff7d\041" +
    "\uff7d\050\uff7d\062\uff7d\063\uff7d\064\uff7d\067\uff7d\001\002" +
    "\000\004\030\u0129\001\002\000\056\003\045\004\060\010" +
    "\041\012\053\013\044\014\062\015\072\016\101\017\046" +
    "\020\076\021\061\022\030\023\066\024\043\025\111\026" +
    "\107\041\051\050\036\062\104\063\067\064\057\067\025" +
    "\001\002\000\004\031\u012b\001\002\000\064\003\uff7c\004" +
    "\uff7c\005\uff7c\006\uff7c\010\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023" +
    "\uff7c\024\uff7c\025\uff7c\026\uff7c\031\uff7c\041\uff7c\050\uff7c" +
    "\062\uff7c\063\uff7c\064\uff7c\067\uff7c\001\002\000\064\003" +
    "\uffdd\004\uffdd\005\uffdd\006\uffdd\010\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\031\uffdd\041\uffdd" +
    "\050\uffdd\062\uffdd\063\uffdd\064\uffdd\067\uffdd\001\002\000" +
    "\030\027\uff3a\034\uff3a\036\uff3a\046\uff3a\047\uff3a\051\uff3a" +
    "\052\uff3a\053\uff3a\054\uff3a\055\uff3a\056\uff3a\001\002\000" +
    "\026\012\053\023\066\024\043\026\254\041\051\050\036" +
    "\062\104\063\067\064\057\067\251\001\002\000\030\027" +
    "\uff3b\034\uff3b\036\uff3b\046\uff3b\047\uff3b\051\uff3b\052\uff3b" +
    "\053\uff3b\054\uff3b\055\uff3b\056\uff3b\001\002\000\024\027" +
    "\u0133\046\uff33\047\uff33\051\uff33\052\uff33\053\uff33\054\uff33" +
    "\055\uff33\056\uff33\001\002\000\024\027\u0132\046\uff32\047" +
    "\uff32\051\uff32\052\uff32\053\uff32\054\uff32\055\uff32\056\uff32" +
    "\001\002\000\030\027\uff38\034\uff38\036\uff38\046\uff38\047" +
    "\uff38\051\uff38\052\uff38\053\uff38\054\uff38\055\uff38\056\uff38" +
    "\001\002\000\030\027\uff39\034\uff39\036\uff39\046\uff39\047" +
    "\uff39\051\uff39\052\uff39\053\uff39\054\uff39\055\uff39\056\uff39" +
    "\001\002\000\064\003\uffdc\004\uffdc\005\uffdc\006\uffdc\010" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\031\uffdc\041\uffdc\050\uffdc\062\uffdc\063\uffdc\064\uffdc" +
    "\067\uffdc\001\002\000\012\002\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\001\002\000\006\034\uffc9\037\uffc9\001\002\000\032" +
    "\012\u0140\023\066\024\043\026\107\041\051\050\036\062" +
    "\104\063\067\064\u013b\065\u0139\066\u013c\067\u013a\001\002" +
    "\000\004\034\uff9f\001\002\000\004\034\uffa4\001\002\000" +
    "\050\026\141\032\140\034\uffa2\040\uff5d\041\uff5d\042\uff5d" +
    "\043\uff5d\044\uff5d\045\uff5d\046\uff34\047\uff34\051\uff34\052" +
    "\uff34\053\uff34\054\uff34\055\uff34\056\uff34\057\uff51\060\uff51" +
    "\001\002\000\024\034\uffa5\046\uff35\047\uff35\051\uff35\052" +
    "\uff35\053\uff35\054\uff35\055\uff35\056\uff35\001\002\000\004" +
    "\034\uffa3\001\002\000\040\034\uffa1\040\uff5c\041\uff5c\042" +
    "\uff5c\043\uff5c\044\uff5c\045\uff5c\051\uff41\052\uff41\053\uff41" +
    "\054\uff41\055\uff41\056\uff41\057\uff50\060\uff50\001\002\000" +
    "\040\034\uffa7\040\uff5f\041\uff5f\042\uff5f\043\uff5f\044\uff5f" +
    "\045\uff5f\051\uff43\052\uff43\053\uff43\054\uff43\055\uff43\056" +
    "\uff43\057\uff52\060\uff52\001\002\000\040\034\uffa0\040\uff5b" +
    "\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b\051\uff40\052" +
    "\uff40\053\uff40\054\uff40\055\uff40\056\uff40\057\uff4f\060\uff4f" +
    "\001\002\000\020\034\uff9e\051\uff3d\052\uff3d\053\uff3d\054" +
    "\uff3d\055\uff3d\056\uff3d\001\002\000\034\034\uffa6\040\uff5e" +
    "\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\051\uff42\052" +
    "\uff42\053\uff42\054\uff42\055\uff42\056\uff42\001\002\000\044" +
    "\027\uff54\034\uff54\036\uff54\040\uff54\041\uff54\042\uff54\043" +
    "\uff54\044\uff54\045\uff54\046\uff54\047\uff54\051\uff54\052\uff54" +
    "\053\uff54\054\uff54\055\uff54\056\uff54\001\002\000\044\027" +
    "\uff53\034\uff53\036\uff53\040\uff53\041\uff53\042\uff53\043\uff53" +
    "\044\uff53\045\uff53\046\uff53\047\uff53\051\uff53\052\uff53\053" +
    "\uff53\054\uff53\055\uff53\056\uff53\001\002\000\044\027\uff57" +
    "\034\uff57\036\uff57\040\uff57\041\uff57\042\uff57\043\uff57\044" +
    "\uff57\045\uff57\046\uff57\047\uff57\051\uff57\052\uff57\053\uff57" +
    "\054\uff57\055\uff57\056\uff57\001\002\000\026\012\u0149\023" +
    "\066\024\043\026\254\041\051\050\036\062\104\063\067" +
    "\064\u0147\067\u0146\001\002\000\034\026\141\032\140\034" +
    "\uffb3\046\uff34\047\uff34\051\uff34\052\uff34\053\uff34\054\uff34" +
    "\055\uff34\056\uff34\057\uff51\060\uff51\001\002\000\024\034" +
    "\uffb4\046\uff35\047\uff35\051\uff35\052\uff35\053\uff35\054\uff35" +
    "\055\uff35\056\uff35\001\002\000\024\034\uffb2\046\uff33\047" +
    "\uff33\051\uff33\052\uff33\053\uff33\054\uff33\055\uff33\056\uff33" +
    "\001\002\000\020\034\uffb0\051\uff3d\052\uff3d\053\uff3d\054" +
    "\uff3d\055\uff3d\056\uff3d\001\002\000\024\034\uffb1\046\uff32" +
    "\047\uff32\051\uff32\052\uff32\053\uff32\054\uff32\055\uff32\056" +
    "\uff32\001\002\000\010\005\ufff7\006\ufff7\031\ufff7\001\002" +
    "\000\024\012\u0154\023\066\024\043\026\120\041\051\062" +
    "\104\063\067\065\u014d\067\u014f\001\002\000\004\034\uff9a" +
    "\001\002\000\020\034\uff9c\040\uff5a\041\uff5a\042\uff5a\043" +
    "\uff5a\044\uff5a\045\uff5a\001\002\000\030\026\141\032\140" +
    "\034\uff99\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045" +
    "\uff5d\057\uff51\060\uff51\001\002\000\024\034\uff98\040\uff5c" +
    "\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\057\uff50\060" +
    "\uff50\001\002\000\024\034\uff9d\040\uff5f\041\uff5f\042\uff5f" +
    "\043\uff5f\044\uff5f\045\uff5f\057\uff52\060\uff52\001\002\000" +
    "\020\034\uff9b\040\uff59\041\uff59\042\uff59\043\uff59\044\uff59" +
    "\045\uff59\001\002\000\024\034\uff97\040\uff5b\041\uff5b\042" +
    "\uff5b\043\uff5b\044\uff5b\045\uff5b\057\uff4f\060\uff4f\001\002" +
    "\000\004\034\uff96\001\002\000\004\067\u015c\001\002\000" +
    "\004\067\uff2d\001\002\000\004\067\uff2e\001\002\000\012" +
    "\002\ufffc\017\u0156\020\u0157\021\u015a\001\002\000\004\002" +
    "\ufffe\001\002\000\004\067\uff2f\001\002\000\004\002\ufffb" +
    "\001\002\000\004\026\u015d\001\002\000\016\016\u015e\017" +
    "\u0161\020\u0162\021\u0165\022\u0163\027\u0160\001\002\000\004" +
    "\067\u0179\001\002\000\004\027\u0175\001\002\000\004\030" +
    "\u0172\001\002\000\004\067\u016e\001\002\000\004\067\u016d" +
    "\001\002\000\004\067\u016c\001\002\000\006\027\uffed\036" +
    "\u016a\001\002\000\004\067\u0166\001\002\000\010\027\ufff4" +
    "\032\u0167\036\ufff4\001\002\000\004\062\u0168\001\002\000" +
    "\004\033\u0169\001\002\000\006\027\uffef\036\uffef\001\002" +
    "\000\014\016\u015e\017\u0161\020\u0162\021\u0165\022\u0163\001" +
    "\002\000\004\027\uffec\001\002\000\006\027\ufff0\036\ufff0" +
    "\001\002\000\006\027\ufff3\036\ufff3\001\002\000\010\027" +
    "\ufff1\032\u016f\036\ufff1\001\002\000\004\062\u0170\001\002" +
    "\000\004\033\u0171\001\002\000\006\027\uffee\036\uffee\001" +
    "\002\000\056\003\045\004\060\010\041\012\053\013\044" +
    "\014\062\015\072\016\101\017\046\020\076\021\061\022" +
    "\030\023\066\024\043\025\111\026\107\041\051\050\036" +
    "\062\104\063\067\064\057\067\025\001\002\000\004\031" +
    "\u0174\001\002\000\012\002\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\001\002\000\004\030\u0176\001\002\000\056\003\045\004" +
    "\060\010\041\012\053\013\044\014\062\015\072\016\101" +
    "\017\046\020\076\021\061\022\030\023\066\024\043\025" +
    "\111\026\107\041\051\050\036\062\104\063\067\064\057" +
    "\067\025\001\002\000\004\031\u0178\001\002\000\012\002" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\001\002\000\006\027\ufff2" +
    "\036\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0177\000\010\002\006\003\003\004\004\001\001\000" +
    "\002\001\001\000\010\005\u0158\007\u0157\070\u0154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\120" +
    "\006\030\012\064\015\077\016\054\017\101\020\046\021" +
    "\022\022\102\023\047\024\037\025\014\026\036\027\053" +
    "\030\067\031\041\032\025\033\016\034\031\035\105\036" +
    "\072\037\055\040\021\042\062\043\063\044\017\053\074" +
    "\054\033\056\076\057\051\061\023\062\070\064\034\065" +
    "\032\067\073\071\015\072\020\073\104\074\107\075\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\120\006\u014a" +
    "\012\064\015\077\016\054\017\101\020\046\021\022\022" +
    "\102\023\047\024\037\025\014\026\036\027\053\030\067" +
    "\031\041\032\025\033\016\034\031\035\105\036\072\037" +
    "\055\040\021\042\062\043\063\044\017\053\074\054\033" +
    "\056\076\057\051\061\023\062\070\064\034\065\032\067" +
    "\073\071\015\072\020\073\104\074\107\075\026\001\001" +
    "\000\002\001\001\000\004\060\u0143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\012\u011a\054\u0118" +
    "\056\076\057\u011c\061\023\071\u011d\072\u011b\073\u011e\074" +
    "\107\075\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\u0101\061" +
    "\u0103\071\376\072\u0102\073\u0100\074\107\075\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\063\247\066\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\223\001\001\000\120\006\222\012\064\015\077\016\054" +
    "\017\101\020\046\021\022\022\102\023\047\024\037\025" +
    "\014\026\036\027\053\030\067\031\041\032\025\033\016" +
    "\034\031\035\105\036\072\037\055\040\021\042\062\043" +
    "\063\044\017\053\074\054\033\056\076\057\051\061\023" +
    "\062\070\064\034\065\032\067\073\071\015\072\020\073" +
    "\104\074\107\075\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\012\172\054\170\056\076" +
    "\057\173\061\023\062\175\064\034\065\176\067\073\071" +
    "\174\072\020\073\104\074\107\075\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\012\116\054\113\056" +
    "\076\057\120\061\023\071\122\072\121\073\123\074\107" +
    "\075\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\134\054\132\056\076\057\131\061\023\071\130\072" +
    "\135\073\133\074\107\075\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\012\150\013" +
    "\153\014\144\053\141\054\033\056\076\057\051\061\023" +
    "\062\070\064\034\065\032\067\073\071\151\072\152\073" +
    "\154\074\107\075\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\012\150\013\153\014\156\053\141" +
    "\054\033\056\076\057\051\061\023\062\070\064\034\065" +
    "\032\067\073\071\151\072\152\073\154\074\107\075\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\206\071" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\012" +
    "\214\054\212\056\076\057\216\061\023\071\217\072\215" +
    "\073\133\074\107\075\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\012\134\054\232\056\233" +
    "\057\131\061\023\071\130\072\135\073\133\074\107\075" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\012\252\057\255\061\023" +
    "\062\260\064\034\065\262\067\270\071\256\072\254\073" +
    "\261\074\107\075\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\012\252\057\255\061\023\062\260\064\251" +
    "\065\262\067\257\071\256\072\254\073\261\074\107\075" +
    "\026\001\001\000\002\001\001\000\004\063\265\001\001" +
    "\000\002\001\001\000\036\012\172\054\263\056\076\057" +
    "\173\061\023\062\175\064\034\065\176\067\073\071\174" +
    "\072\020\073\104\074\107\075\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\063\247" +
    "\066\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\012\252\057\255\061\023\062\260\064\266\065\262\067" +
    "\267\071\256\072\254\073\261\074\107\075\026\001\001" +
    "\000\004\063\265\001\001\000\006\063\247\066\241\001" +
    "\001\000\006\063\247\066\241\001\001\000\002\001\001" +
    "\000\034\012\252\041\273\057\255\061\023\062\276\064" +
    "\034\065\277\067\073\071\256\072\254\073\261\074\107" +
    "\075\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\120\006\302\012\064\015\077\016\054\017" +
    "\101\020\046\021\022\022\102\023\047\024\037\025\014" +
    "\026\036\027\053\030\067\031\041\032\025\033\016\034" +
    "\031\035\105\036\072\037\055\040\021\042\062\043\063" +
    "\044\017\053\074\054\033\056\076\057\051\061\023\062" +
    "\070\064\034\065\032\067\073\071\015\072\020\073\104" +
    "\074\107\075\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\045\315\046\314\047\317\050\313\051\320\001\001" +
    "\000\004\052\365\001\001\000\004\052\363\001\001\000" +
    "\004\052\361\001\001\000\002\001\001\000\004\052\326" +
    "\001\001\000\004\052\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\120\006\325\012\064" +
    "\015\077\016\054\017\101\020\046\021\022\022\102\023" +
    "\047\024\037\025\014\026\036\027\053\030\067\031\041" +
    "\032\025\033\016\034\031\035\105\036\072\037\055\040" +
    "\021\042\062\043\063\044\017\053\074\054\033\056\076" +
    "\057\051\061\023\062\070\064\034\065\032\067\073\071" +
    "\015\072\020\073\104\074\107\075\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\120\006\336\012\064\015\077\016" +
    "\054\017\101\020\046\021\022\022\102\023\047\024\037" +
    "\025\014\026\036\027\053\030\067\031\041\032\025\033" +
    "\016\034\031\035\105\036\072\037\055\040\021\042\062" +
    "\043\063\044\017\053\074\054\033\056\076\057\051\061" +
    "\023\062\070\064\034\065\032\067\073\071\015\072\020" +
    "\073\104\074\107\075\026\001\001\000\004\051\340\001" +
    "\001\000\002\001\001\000\002\001\001\000\120\006\342" +
    "\012\064\015\077\016\054\017\101\020\046\021\022\022" +
    "\102\023\047\024\037\025\014\026\036\027\053\030\067" +
    "\031\041\032\025\033\016\034\031\035\105\036\072\037" +
    "\055\040\021\042\062\043\063\044\017\053\074\054\033" +
    "\056\076\057\051\061\023\062\070\064\034\065\032\067" +
    "\073\071\015\072\020\073\104\074\107\075\026\001\001" +
    "\000\004\047\343\001\001\000\002\001\001\000\002\001" +
    "\001\000\120\006\346\012\064\015\077\016\054\017\101" +
    "\020\046\021\022\022\102\023\047\024\037\025\014\026" +
    "\036\027\053\030\067\031\041\032\025\033\016\034\031" +
    "\035\105\036\072\037\055\040\021\042\062\043\063\044" +
    "\017\053\074\054\033\056\076\057\051\061\023\062\070" +
    "\064\034\065\032\067\073\071\015\072\020\073\104\074" +
    "\107\075\026\001\001\000\004\046\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\120\006\352\012\064\015" +
    "\077\016\054\017\101\020\046\021\022\022\102\023\047" +
    "\024\037\025\014\026\036\027\053\030\067\031\041\032" +
    "\025\033\016\034\031\035\105\036\072\037\055\040\021" +
    "\042\062\043\063\044\017\053\074\054\033\056\076\057" +
    "\051\061\023\062\070\064\034\065\032\067\073\071\015" +
    "\072\020\073\104\074\107\075\026\001\001\000\004\045" +
    "\353\001\001\000\002\001\001\000\002\001\001\000\120" +
    "\006\356\012\064\015\077\016\054\017\101\020\046\021" +
    "\022\022\102\023\047\024\037\025\014\026\036\027\053" +
    "\030\067\031\041\032\025\033\016\034\031\035\105\036" +
    "\072\037\055\040\021\042\062\043\063\044\017\053\074" +
    "\054\033\056\076\057\051\061\023\062\070\064\034\065" +
    "\032\067\073\071\015\072\020\073\104\074\107\075\026" +
    "\001\001\000\004\050\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\012\134\054\u0105" +
    "\056\076\057\131\061\023\071\130\072\135\073\133\074" +
    "\107\075\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\012" +
    "\u010e\054\u010c\056\076\057\u010f\061\023\071\130\072\135" +
    "\073\u0111\074\107\075\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\012\252\041\u0122\057\255\061\023\062\276" +
    "\064\034\065\277\067\073\071\256\072\254\073\261\074" +
    "\107\075\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\120\006\u0125\012\064\015\077\016\054\017\101\020" +
    "\046\021\022\022\102\023\047\024\037\025\014\026\036" +
    "\027\053\030\067\031\041\032\025\033\016\034\031\035" +
    "\105\036\072\037\055\040\021\042\062\043\063\044\017" +
    "\053\074\054\033\056\076\057\051\061\023\062\070\064" +
    "\034\065\032\067\073\071\015\072\020\073\104\074\107" +
    "\075\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\120\006\u0129\012\064\015\077\016\054" +
    "\017\101\020\046\021\022\022\102\023\047\024\037\025" +
    "\014\026\036\027\053\030\067\031\041\032\025\033\016" +
    "\034\031\035\105\036\072\037\055\040\021\042\062\043" +
    "\063\044\017\053\074\054\033\056\076\057\051\061\023" +
    "\062\070\064\034\065\032\067\073\071\015\072\020\073" +
    "\104\074\107\075\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\012" +
    "\252\057\255\061\023\062\u012f\064\034\065\u0130\067\073" +
    "\071\256\072\254\073\261\074\107\075\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\012\u013c\053\u0137\054\033" +
    "\056\076\057\051\061\023\062\070\064\034\065\032\067" +
    "\073\071\u013e\072\u013d\073\u0140\074\107\075\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\012\252\057\255\061\023\062\u0147\064\034\065" +
    "\u0149\067\073\071\256\072\254\073\261\074\107\075\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\012\u014f\054\u014d\056\076\057\u0151\061\023\071" +
    "\u0152\072\u0150\073\133\074\107\075\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\u015a\007\u0157\070\u0154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\u0163\011\u015e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\u0163\011\u016a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\120\006\u0172\012\064\015\077\016" +
    "\054\017\101\020\046\021\022\022\102\023\047\024\037" +
    "\025\014\026\036\027\053\030\067\031\041\032\025\033" +
    "\016\034\031\035\105\036\072\037\055\040\021\042\062" +
    "\043\063\044\017\053\074\054\033\056\076\057\051\061" +
    "\023\062\070\064\034\065\032\067\073\071\015\072\020" +
    "\073\104\074\107\075\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\120\006\u0176\012\064" +
    "\015\077\016\054\017\101\020\046\021\022\022\102\023" +
    "\047\024\037\025\014\026\036\027\053\030\067\031\041" +
    "\032\025\033\016\034\031\035\105\036\072\037\055\040" +
    "\021\042\062\043\063\044\017\053\074\054\033\056\076" +
    "\057\051\061\023\062\070\064\034\065\032\067\073\071" +
    "\015\072\020\073\104\074\107\075\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error sintactico: ");
		if (info instanceof java_cup.runtime.Symbol) 
			m.append( info.toString() );
		System.out.println(m);
	}
  
	public NodoPrograma raiz;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoPrograma p = (NodoPrograma)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 raiz = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= funcMain 
            {
              NodoPrograma RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoFuncMain m = (NodoFuncMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoPrograma(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= funcMain funcUsuario 
            {
              NodoPrograma RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoFuncMain m = (NodoFuncMain)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoFuncUsuario f = (NodoFuncUsuario)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoPrograma(m,f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcMain ::= TIPO_INT MAIN PAREN_A PAREN_C CURS_A bloqueCod CURS_C 
            {
              NodoFuncMain RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoFuncMain(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcMain",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcUsuario ::= crearFuncion 
            {
              NodoFuncUsuario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearFuncion c = (NodoCrearFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoFuncUsuario(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcUsuario",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcUsuario ::= crearFuncion funcUsuario 
            {
              NodoFuncUsuario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoCrearFuncion c = (NodoCrearFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoFuncUsuario f = (NodoFuncUsuario)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoFuncUsuario(c,f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcUsuario",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloqueCod ::= sentencia 
            {
              NodoBloqueCod RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoSentencia s = (NodoSentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoBloqueCod(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloqueCod ::= estrucControl 
            {
              NodoBloqueCod RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoSintactico e = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoBloqueCod(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloqueCod ::= sentencia bloqueCod 
            {
              NodoBloqueCod RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSentencia s = (NodoSentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoBloqueCod(s,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloqueCod ::= estrucControl bloqueCod 
            {
              NodoBloqueCod RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSintactico e = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoBloqueCod(e,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // crearFuncion ::= tipoFun IDENTIF PAREN_A PAREN_C CURS_A bloqueCod CURS_C 
            {
              NodoCrearFuncion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoCrearFuncion(t,i,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // crearFuncion ::= tipoFun IDENTIF PAREN_A crearParametros PAREN_C CURS_A bloqueCod CURS_C 
            {
              NodoCrearFuncion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoCrearParametros p = (NodoCrearParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoCrearFuncion(t,i,p,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // crearParametro ::= TIPO_INT IDENTIF 
            {
              NodoCrearParametro RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearParametro("int",i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearParametro",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // crearParametro ::= TIPO_FLOAT IDENTIF 
            {
              NodoCrearParametro RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearParametro("float",i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearParametro",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // crearParametro ::= TIPO_BOOL IDENTIF 
            {
              NodoCrearParametro RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearParametro("boolean",i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearParametro",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // crearParametro ::= TIPO_CHAR IDENTIF 
            {
              NodoCrearParametro RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearParametro("char",i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearParametro",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // crearParametro ::= TIPO_STRING IDENTIF 
            {
              NodoCrearParametro RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearParametro("String",i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearParametro",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // crearParametro ::= TIPO_INT IDENTIF CUAD_A LIT_ENTERO CUAD_C 
            {
              NodoCrearParametro RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoCrearParametro("int",i,t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearParametro",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // crearParametro ::= TIPO_CHAR IDENTIF CUAD_A LIT_ENTERO CUAD_C 
            {
              NodoCrearParametro RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoCrearParametro("char",i,t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearParametro",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // crearParametros ::= crearParametro 
            {
              NodoCrearParametros RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearParametro p = (NodoCrearParametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearParametros(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearParametros",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // crearParametros ::= crearParametro COMA crearParametros 
            {
              NodoCrearParametros RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearParametro p = (NodoCrearParametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearParametros c = (NodoCrearParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearParametros(p,c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearParametros",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // llamarFuncion ::= IDENTIF PAREN_A PAREN_C 
            {
              NodoLlamarFuncion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodoLlamarFuncion(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamarFuncion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // llamarFuncion ::= IDENTIF PAREN_A parametros PAREN_C 
            {
              NodoLlamarFuncion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoParametros p = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoLlamarFuncion(i,p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamarFuncion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametro ::= valorInt 
            {
              NodoParametro RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorInt v = (NodoValorInt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoParametro(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametro ::= valorFloat 
            {
              NodoParametro RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorFloat v = (NodoValorFloat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoParametro(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametro ::= LIT_BOOLEANO 
            {
              NodoParametro RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoParametro(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametro ::= LIT_CHAR 
            {
              NodoParametro RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoParametro(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametro ::= LIT_STRING 
            {
              NodoParametro RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoParametro(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametro ::= IDENTIF 
            {
              NodoParametro RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador v = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoParametro(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametro ::= llamarFuncion 
            {
              NodoParametro RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamarFuncion v = (NodoLlamarFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoParametro(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametro ::= elemArreglo 
            {
              NodoParametro RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElemArreg v = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoParametro(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametro ::= expr 
            {
              NodoParametro RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoSintactico v = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoParametro(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros ::= parametro 
            {
              NodoParametros RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoParametro p = (NodoParametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoParametros(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros ::= parametro COMA parametros 
            {
              NodoParametros RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoParametro p = (NodoParametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoParametros s = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoParametros(p,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= crearVar HASHTAG 
            {
              NodoSentencia RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoCrearVar n = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSentencia(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= crearAsignVar HASHTAG 
            {
              NodoSentencia RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoCrearAsignVar n = (NodoCrearAsignVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSentencia(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= asignVar HASHTAG 
            {
              NodoSentencia RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignVar n = (NodoAsignVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSentencia(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= asignElemArreg HASHTAG 
            {
              NodoSentencia RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignElemArreg n = (NodoAsignElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSentencia(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= expr HASHTAG 
            {
              NodoSentencia RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSintactico n = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSentencia(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= llamarFuncion HASHTAG 
            {
              NodoSentencia RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoLlamarFuncion n = (NodoLlamarFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSentencia(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= salidaEst HASHTAG 
            {
              NodoSentencia RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSalidaEst n = (NodoSalidaEst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSentencia(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= BREAK HASHTAG 
            {
              NodoSentencia RESULT =null;
		 RESULT = new NodoSentencia(new NodoBreak()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= sentenciaReturn HASHTAG 
            {
              NodoSentencia RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoReturn n = (NodoReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSentencia(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= error HASHTAG 
            {
              NodoSentencia RESULT =null;
		 System.out.println("Recuperado de error semántico en sentencia.");
			   RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // crearVar ::= crearInt 
            {
              NodoCrearVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearVar",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // crearVar ::= crearFloat 
            {
              NodoCrearVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearVar",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // crearVar ::= crearBool 
            {
              NodoCrearVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearVar",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // crearVar ::= crearChar 
            {
              NodoCrearVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearVar",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // crearVar ::= crearString 
            {
              NodoCrearVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearVar",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // crearVar ::= crearArrayInt 
            {
              NodoCrearVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearVar",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // crearVar ::= crearArrayChar 
            {
              NodoCrearVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearVar",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // crearInt ::= TIPO_INT IDENTIF 
            {
              NodoCrearVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearVar("int",i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearInt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // crearFloat ::= TIPO_FLOAT IDENTIF 
            {
              NodoCrearVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearVar("float",i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearFloat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // crearBool ::= TIPO_BOOL IDENTIF 
            {
              NodoCrearVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearVar("boolean",i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearBool",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // crearChar ::= TIPO_CHAR IDENTIF 
            {
              NodoCrearVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearVar("char",i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearChar",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // crearString ::= TIPO_STRING IDENTIF 
            {
              NodoCrearVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearVar("String",i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearString",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // crearArrayInt ::= TIPO_INT IDENTIF CUAD_A LIT_ENTERO CUAD_C 
            {
              NodoCrearVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoCrearVar("int",i,t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearArrayInt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // crearArrayChar ::= TIPO_CHAR IDENTIF CUAD_A LIT_ENTERO CUAD_C 
            {
              NodoCrearVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoCrearVar("char",i,t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearArrayChar",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // crearAsignVar ::= crearAsignInt 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearAsignVar c = (NodoCrearAsignVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignVar",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // crearAsignVar ::= crearAsignFloat 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearAsignVar c = (NodoCrearAsignVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignVar",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // crearAsignVar ::= crearAsignBool 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearAsignVar c = (NodoCrearAsignVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignVar",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // crearAsignVar ::= crearAsignChar 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearAsignVar c = (NodoCrearAsignVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignVar",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // crearAsignVar ::= crearAsignString 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCrearAsignVar c = (NodoCrearAsignVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignVar",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // crearAsignInt ::= crearInt IGUAL valorInt 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorInt v = (NodoValorInt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignInt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // crearAsignInt ::= crearInt IGUAL IDENTIF 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador v = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignInt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // crearAsignInt ::= crearInt IGUAL llamarFuncion 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamarFuncion v = (NodoLlamarFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignInt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // crearAsignInt ::= crearInt IGUAL elemArreglo 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElemArreg v = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignInt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // crearAsignInt ::= crearInt IGUAL exprBin 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprBin v = (NodoExprBin)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignInt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // crearAsignInt ::= crearInt IGUAL exprUna 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprUna v = (NodoExprUna)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignInt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // crearAsignInt ::= crearInt IGUAL NULL 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodoCrearAsignVar(c,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignInt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // crearAsignFloat ::= crearFloat IGUAL valorFloat 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorFloat v = (NodoValorFloat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignFloat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // crearAsignFloat ::= crearFloat IGUAL IDENTIF 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador v = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignFloat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // crearAsignFloat ::= crearFloat IGUAL llamarFuncion 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamarFuncion v = (NodoLlamarFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignFloat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // crearAsignFloat ::= crearFloat IGUAL exprBin 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprBin v = (NodoExprBin)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignFloat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // crearAsignFloat ::= crearFloat IGUAL exprUna 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprUna v = (NodoExprUna)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignFloat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // crearAsignFloat ::= crearFloat IGUAL NULL 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodoCrearAsignVar(c,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignFloat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // crearAsignBool ::= crearBool IGUAL LIT_BOOLEANO 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignBool",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // crearAsignBool ::= crearBool IGUAL IDENTIF 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador v = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignBool",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // crearAsignBool ::= crearBool IGUAL exprRel 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprRel v = (NodoExprRel)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignBool",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // crearAsignBool ::= crearBool IGUAL exprLog 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprLog v = (NodoExprLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignBool",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // crearAsignBool ::= crearBool IGUAL NULL 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodoCrearAsignVar(c,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignBool",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // crearAsignChar ::= crearChar IGUAL LIT_CHAR 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignChar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // crearAsignChar ::= crearChar IGUAL IDENTIF 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador v = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignChar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // crearAsignChar ::= crearChar IGUAL llamarFuncion 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamarFuncion v = (NodoLlamarFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignChar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // crearAsignChar ::= crearChar IGUAL elemArreglo 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElemArreg v = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignChar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // crearAsignChar ::= crearChar IGUAL NULL 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodoCrearAsignVar(c,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignChar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // crearAsignString ::= crearString IGUAL LIT_STRING 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignString",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // crearAsignString ::= crearString IGUAL IDENTIF 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador v = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCrearAsignVar(c,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignString",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // crearAsignString ::= crearString IGUAL NULL 
            {
              NodoCrearAsignVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCrearVar c = (NodoCrearVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodoCrearAsignVar(c,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crearAsignString",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // asignVar ::= IDENTIF IGUAL valorInt 
            {
              NodoAsignVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorInt v = (NodoValorInt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignVar(i,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignVar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // asignVar ::= IDENTIF IGUAL valorFloat 
            {
              NodoAsignVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorFloat v = (NodoValorFloat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignVar(i,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignVar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // asignVar ::= IDENTIF IGUAL LIT_BOOLEANO 
            {
              NodoAsignVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignVar(i,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignVar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // asignVar ::= IDENTIF IGUAL LIT_CHAR 
            {
              NodoAsignVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignVar(i,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignVar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // asignVar ::= IDENTIF IGUAL LIT_STRING 
            {
              NodoAsignVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignVar(i,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignVar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // asignVar ::= IDENTIF IGUAL IDENTIF 
            {
              NodoAsignVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador v = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignVar(i,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignVar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // asignVar ::= IDENTIF IGUAL llamarFuncion 
            {
              NodoAsignVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamarFuncion v = (NodoLlamarFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignVar(i,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignVar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // asignVar ::= IDENTIF IGUAL elemArreglo 
            {
              NodoAsignVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElemArreg v = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignVar(i,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignVar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // asignVar ::= IDENTIF IGUAL expr 
            {
              NodoAsignVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoSintactico v = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignVar(i,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignVar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // asignVar ::= IDENTIF IGUAL NULL 
            {
              NodoAsignVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodoAsignVar(i,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignVar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // asignElemArreg ::= elemArreglo IGUAL valorInt 
            {
              NodoAsignElemArreg RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoElemArreg e = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorInt v = (NodoValorInt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignElemArreg(e,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignElemArreg",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // asignElemArreg ::= elemArreglo IGUAL exprBin 
            {
              NodoAsignElemArreg RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoElemArreg e = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprBin v = (NodoExprBin)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignElemArreg(e,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignElemArreg",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // asignElemArreg ::= elemArreglo IGUAL exprUna 
            {
              NodoAsignElemArreg RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoElemArreg e = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprUna v = (NodoExprUna)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignElemArreg(e,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignElemArreg",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // asignElemArreg ::= elemArreglo IGUAL LIT_CHAR 
            {
              NodoAsignElemArreg RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoElemArreg e = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignElemArreg(e,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignElemArreg",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // asignElemArreg ::= elemArreglo IGUAL IDENTIF 
            {
              NodoAsignElemArreg RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoElemArreg e = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador v = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignElemArreg(e,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignElemArreg",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // asignElemArreg ::= elemArreglo IGUAL llamarFuncion 
            {
              NodoAsignElemArreg RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoElemArreg e = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamarFuncion v = (NodoLlamarFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignElemArreg(e,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignElemArreg",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // asignElemArreg ::= elemArreglo IGUAL elemArreglo 
            {
              NodoAsignElemArreg RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoElemArreg e = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElemArreg v = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignElemArreg(e,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignElemArreg",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // asignElemArreg ::= elemArreglo IGUAL NULL 
            {
              NodoAsignElemArreg RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoElemArreg e = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NodoAsignElemArreg(e,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignElemArreg",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // salidaEst ::= PRINT PAREN_A valorInt PAREN_C 
            {
              NodoSalidaEst RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoValorInt v = (NodoValorInt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSalidaEst(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("salidaEst",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // salidaEst ::= PRINT PAREN_A valorFloat PAREN_C 
            {
              NodoSalidaEst RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoValorFloat v = (NodoValorFloat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSalidaEst(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("salidaEst",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // salidaEst ::= PRINT PAREN_A LIT_CHAR PAREN_C 
            {
              NodoSalidaEst RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSalidaEst(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("salidaEst",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // salidaEst ::= PRINT PAREN_A LIT_STRING PAREN_C 
            {
              NodoSalidaEst RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSalidaEst(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("salidaEst",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // salidaEst ::= PRINT PAREN_A IDENTIF PAREN_C 
            {
              NodoSalidaEst RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoIdentificador v = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSalidaEst(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("salidaEst",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // salidaEst ::= PRINT PAREN_A llamarFuncion PAREN_C 
            {
              NodoSalidaEst RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoLlamarFuncion v = (NodoLlamarFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSalidaEst(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("salidaEst",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // salidaEst ::= PRINT PAREN_A elemArreglo PAREN_C 
            {
              NodoSalidaEst RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoElemArreg v = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSalidaEst(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("salidaEst",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // salidaEst ::= PRINT PAREN_A exprBin PAREN_C 
            {
              NodoSalidaEst RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExprBin v = (NodoExprBin)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSalidaEst(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("salidaEst",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // salidaEst ::= PRINT PAREN_A exprUna PAREN_C 
            {
              NodoSalidaEst RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExprUna v = (NodoExprUna)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoSalidaEst(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("salidaEst",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentenciaReturn ::= RETURN valorInt 
            {
              NodoReturn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorInt v = (NodoValorInt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoReturn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentenciaReturn ::= RETURN valorFloat 
            {
              NodoReturn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorFloat v = (NodoValorFloat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoReturn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentenciaReturn ::= RETURN LIT_CHAR 
            {
              NodoReturn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoReturn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentenciaReturn ::= RETURN IDENTIF 
            {
              NodoReturn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador v = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoReturn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentenciaReturn ::= RETURN llamarFuncion 
            {
              NodoReturn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamarFuncion v = (NodoLlamarFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoReturn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentenciaReturn ::= RETURN elemArreglo 
            {
              NodoReturn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElemArreg v = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoReturn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentenciaReturn ::= RETURN exprBin 
            {
              NodoReturn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprBin v = (NodoExprBin)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoReturn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentenciaReturn ::= RETURN exprUna 
            {
              NodoReturn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprUna v = (NodoExprUna)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoReturn(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // estrucControl ::= if 
            {
              NodoSintactico RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoSintactico i = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estrucControl",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // estrucControl ::= while 
            {
              NodoSintactico RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoEstrucWhile w = (NodoEstrucWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = w; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estrucControl",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // estrucControl ::= switch 
            {
              NodoSintactico RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoEstrucSwitch s = (NodoEstrucSwitch)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estrucControl",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // condicion ::= LIT_BOOLEANO 
            {
              NodoCondicion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCondicion(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // condicion ::= IDENTIF 
            {
              NodoCondicion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador c = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCondicion(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // condicion ::= exprRel 
            {
              NodoCondicion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprRel c = (NodoExprRel)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCondicion(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // condicion ::= exprLog 
            {
              NodoCondicion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprLog c = (NodoExprLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCondicion(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // if ::= IF PAREN_A condicion PAREN_C CURS_A bloqueCod CURS_C 
            {
              NodoSintactico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoCondicion c = (NodoCondicion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoEstrucIf(c,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // if ::= IF PAREN_A condicion PAREN_C CURS_A bloqueCod CURS_C ELSE CURS_A bloqueCod CURS_C 
            {
              NodoSintactico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodoCondicion c = (NodoCondicion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoBloqueCod b1 = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBloqueCod b2 = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoEstrucIfElse(c,b1,b2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // while ::= WHILE PAREN_A condicion PAREN_C CURS_A bloqueCod CURS_C 
            {
              NodoEstrucWhile RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoCondicion c = (NodoCondicion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoEstrucWhile(c,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // switch ::= SWITCH PAREN_A IDENTIF PAREN_C CURS_A casosInt casoDefault CURS_C 
            {
              NodoEstrucSwitch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCasosInt c = (NodoCasosInt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoCasoDefault d = (NodoCasoDefault)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoEstrucSwitch(i,"int",c,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // switch ::= SWITCH PAREN_A IDENTIF PAREN_C CURS_A casosFloat casoDefault CURS_C 
            {
              NodoEstrucSwitch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCasosFloat c = (NodoCasosFloat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoCasoDefault d = (NodoCasoDefault)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoEstrucSwitch(i,"float",c,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // switch ::= SWITCH PAREN_A IDENTIF PAREN_C CURS_A casosBool casoDefault CURS_C 
            {
              NodoEstrucSwitch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCasosBool c = (NodoCasosBool)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoCasoDefault d = (NodoCasoDefault)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoEstrucSwitch(i,"boolean",c,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // switch ::= SWITCH PAREN_A IDENTIF PAREN_C CURS_A casosChar casoDefault CURS_C 
            {
              NodoEstrucSwitch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCasosChar c = (NodoCasosChar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoCasoDefault d = (NodoCasoDefault)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoEstrucSwitch(i,"char",c,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // switch ::= SWITCH PAREN_A IDENTIF PAREN_C CURS_A casosString casoDefault CURS_C 
            {
              NodoEstrucSwitch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCasosString c = (NodoCasosString)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoCasoDefault d = (NodoCasoDefault)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoEstrucSwitch(i,"String",c,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // casosInt ::= CASE LIT_ENTERO DOSPUNTOS bloqueCod 
            {
              NodoCasosInt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCasosInt(c,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casosInt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // casosInt ::= CASE LIT_ENTERO DOSPUNTOS bloqueCod casosInt 
            {
              NodoCasosInt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCasosInt n = (NodoCasosInt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCasosInt(c,b,n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casosInt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // casosFloat ::= CASE LIT_FLOTANTE DOSPUNTOS bloqueCod 
            {
              NodoCasosFloat RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Float c = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCasosFloat(c,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casosFloat",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // casosFloat ::= CASE LIT_FLOTANTE DOSPUNTOS bloqueCod casosFloat 
            {
              NodoCasosFloat RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Float c = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCasosFloat n = (NodoCasosFloat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCasosFloat(c,b,n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casosFloat",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // casosBool ::= CASE LIT_BOOLEANO DOSPUNTOS bloqueCod 
            {
              NodoCasosBool RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCasosBool(c,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casosBool",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // casosBool ::= CASE LIT_BOOLEANO DOSPUNTOS bloqueCod casosBool 
            {
              NodoCasosBool RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCasosBool n = (NodoCasosBool)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCasosBool(c,b,n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casosBool",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // casosChar ::= CASE LIT_CHAR DOSPUNTOS bloqueCod 
            {
              NodoCasosChar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCasosChar(c,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casosChar",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // casosChar ::= CASE LIT_CHAR DOSPUNTOS bloqueCod casosChar 
            {
              NodoCasosChar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCasosChar n = (NodoCasosChar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCasosChar(c,b,n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casosChar",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // casosString ::= CASE LIT_STRING DOSPUNTOS bloqueCod 
            {
              NodoCasosString RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCasosString(c,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casosString",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // casosString ::= CASE LIT_STRING DOSPUNTOS bloqueCod casosString 
            {
              NodoCasosString RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCasosString n = (NodoCasosString)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCasosString(c,b,n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casosString",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // casoDefault ::= DEFAULT DOSPUNTOS bloqueCod 
            {
              NodoCasoDefault RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoBloqueCod b = (NodoBloqueCod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoCasoDefault(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casoDefault",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr ::= exprBin 
            {
              NodoSintactico RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprBin e = (NodoExprBin)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expr ::= exprUna 
            {
              NodoSintactico RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprUna e = (NodoExprUna)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expr ::= exprRel 
            {
              NodoSintactico RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprRel e = (NodoExprRel)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expr ::= exprLog 
            {
              NodoSintactico RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprLog e = (NodoExprLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // exprBin ::= operandoBin operadorBin operandoBin 
            {
              NodoExprBin RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoOperadorBin p = (NodoOperadorBin)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExprBin(o1,o2,p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprBin",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // operadorBin ::= MAS 
            {
              NodoOperadorBin RESULT =null;
		 RESULT = new NodoOperadorBin("+"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorBin",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // operadorBin ::= MENOS 
            {
              NodoOperadorBin RESULT =null;
		 RESULT = new NodoOperadorBin("-"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorBin",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // operadorBin ::= DIV 
            {
              NodoOperadorBin RESULT =null;
		 RESULT = new NodoOperadorBin("/"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorBin",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // operadorBin ::= POR 
            {
              NodoOperadorBin RESULT =null;
		 RESULT = new NodoOperadorBin("*"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorBin",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // operadorBin ::= COMPLEMENTO 
            {
              NodoOperadorBin RESULT =null;
		 RESULT = new NodoOperadorBin("%"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorBin",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // operadorBin ::= POTENCIA 
            {
              NodoOperadorBin RESULT =null;
		 RESULT = new NodoOperadorBin("^"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorBin",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // operandoBin ::= valorInt 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorInt v = (NodoValorInt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoBin",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // operandoBin ::= valorFloat 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorFloat v = (NodoValorFloat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoBin",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // operandoBin ::= IDENTIF 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador v = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoBin",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // operandoBin ::= llamarFuncion 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamarFuncion v = (NodoLlamarFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoBin",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // operandoBin ::= elemArreglo 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElemArreg v = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoBin",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // operandoBin ::= exprBin 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprBin v = (NodoExprBin)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoBin",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // operandoBin ::= exprUna 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprUna v = (NodoExprUna)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoBin",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // operandoBin ::= PAREN_A exprBin PAREN_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExprBin v = (NodoExprBin)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoBin",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // exprUna ::= operandoUna operadorUna 
            {
              NodoExprUna RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOperadorUna p = (NodoOperadorUna)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExprUna(o,p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUna",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // exprUna ::= MENOS operandoUna 
            {
              NodoExprUna RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExprUna(o,new NodoOperadorUna("-")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUna",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // exprUna ::= MENOS valorFloat 
            {
              NodoExprUna RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorFloat o = (NodoValorFloat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExprUna(o,new NodoOperadorUna("-")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUna",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // operadorUna ::= MENOSMENOS 
            {
              NodoOperadorUna RESULT =null;
		 RESULT = new NodoOperadorUna("--"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorUna",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // operadorUna ::= MASMAS 
            {
              NodoOperadorUna RESULT =null;
		 RESULT = new NodoOperadorUna("++"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorUna",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // operandoUna ::= valorInt 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorInt v = (NodoValorInt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoUna",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // operandoUna ::= IDENTIF 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador v = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoUna",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // operandoUna ::= llamarFuncion 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamarFuncion v = (NodoLlamarFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoUna",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // operandoUna ::= elemArreglo 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElemArreg v = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoUna",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // operandoUna ::= PAREN_A exprBin PAREN_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExprBin v = (NodoExprBin)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoUna",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // exprRel ::= operandoRel operadorRel operandoRel 
            {
              NodoExprRel RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoOperadorRel p = (NodoOperadorRel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExprRel(o1,o2,p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprRel",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // exprRel ::= operandoRel operadorRel operandoLog 
            {
              NodoExprRel RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoOperadorRel p = (NodoOperadorRel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExprRel(o1,o2,p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprRel",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // exprRel ::= operandoLog operadorRel operandoRel 
            {
              NodoExprRel RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoOperadorRel p = (NodoOperadorRel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExprRel(o1,o2,p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprRel",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // exprRel ::= operandoLog operadorRel operandoLog 
            {
              NodoExprRel RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoOperadorRel p = (NodoOperadorRel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExprRel(o1,o2,p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprRel",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // operadorRel ::= MAYOR 
            {
              NodoOperadorRel RESULT =null;
		 RESULT = new NodoOperadorRel(">"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRel",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // operadorRel ::= MENOR 
            {
              NodoOperadorRel RESULT =null;
		 RESULT = new NodoOperadorRel("<"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRel",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // operadorRel ::= MAYORIGUAL 
            {
              NodoOperadorRel RESULT =null;
		 RESULT = new NodoOperadorRel(">="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRel",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // operadorRel ::= MENORIGUAL 
            {
              NodoOperadorRel RESULT =null;
		 RESULT = new NodoOperadorRel("<="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRel",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // operadorRel ::= ESIGUAL 
            {
              NodoOperadorRel RESULT =null;
		 RESULT = new NodoOperadorRel("=="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRel",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // operadorRel ::= DIFERENTE 
            {
              NodoOperadorRel RESULT =null;
		 RESULT = new NodoOperadorRel("!="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRel",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // operandoRel ::= valorInt 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorInt v = (NodoValorInt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoRel",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // operandoRel ::= valorFloat 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoValorFloat v = (NodoValorFloat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoRel",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // operandoRel ::= llamarFuncion 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamarFuncion v = (NodoLlamarFuncion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoRel",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // operandoRel ::= elemArreglo 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElemArreg v = (NodoElemArreg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoRel",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // operandoRel ::= PAREN_A exprBin PAREN_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExprBin v = (NodoExprBin)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoRel",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // operandoRel ::= exprUna 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprUna v = (NodoExprUna)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoRel",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // operandoRel ::= NULL 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoRel",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // exprLog ::= operandoLog operadorLog operandoLog 
            {
              NodoExprLog RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoOperadorLog p = (NodoOperadorLog)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExprLog(o1,o2,p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // exprLog ::= NOT LIT_BOOLEANO 
            {
              NodoExprLog RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExprLog(o,new NodoOperadorLog("!")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // exprLog ::= NOT IDENTIF 
            {
              NodoExprLog RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador o = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExprLog(o,new NodoOperadorLog("!")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // exprLog ::= NOT PAREN_A exprRel PAREN_C 
            {
              NodoExprLog RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExprRel o = (NodoExprRel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoExprLog(o,new NodoOperadorLog("!")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // exprLog ::= NOT PAREN_A exprLog PAREN_C 
            {
              NodoExprLog RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExprLog o = (NodoExprLog)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoExprLog(o,new NodoOperadorLog("!")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // operadorLog ::= AND 
            {
              NodoOperadorLog RESULT =null;
		 RESULT = new NodoOperadorLog("&"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorLog",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // operadorLog ::= OR 
            {
              NodoOperadorLog RESULT =null;
		 RESULT = new NodoOperadorLog("|"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorLog",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // operandoLog ::= LIT_BOOLEANO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoLog",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // operandoLog ::= IDENTIF 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoIdentificador v = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoLog",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // operandoLog ::= exprRel 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprRel v = (NodoExprRel)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoLog",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // operandoLog ::= exprLog 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExprLog v = (NodoExprLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoLog",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // operandoLog ::= PAREN_A exprRel PAREN_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExprRel v = (NodoExprRel)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoLog",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // operandoLog ::= PAREN_A exprLog PAREN_C 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExprLog v = (NodoExprLog)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operandoLog",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // tipoFun ::= TIPO_INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoFun",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // tipoFun ::= TIPO_FLOAT 
            {
              String RESULT =null;
		 RESULT = "float"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoFun",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // tipoFun ::= TIPO_CHAR 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoFun",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // elemArreglo ::= IDENTIF CUAD_A LIT_ENTERO CUAD_C 
            {
              NodoElemArreg RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoIdentificador i = (TipoIdentificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoElemArreg(i,p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemArreglo",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // valorInt ::= LIT_ENTERO 
            {
              NodoValorInt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoValorInt(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorInt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // valorInt ::= entradaEstInt 
            {
              NodoValorInt RESULT =null;
		 RESULT = new NodoValorInt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorInt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // entradaEstInt ::= READ_INT PAREN_A PAREN_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entradaEstInt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // valorFloat ::= LIT_FLOTANTE 
            {
              NodoValorFloat RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float v = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoValorFloat(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorFloat",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // valorFloat ::= entradaEstFloat 
            {
              NodoValorFloat RESULT =null;
		 RESULT = new NodoValorFloat(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorFloat",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // entradaEstFloat ::= READ_FLOAT PAREN_A PAREN_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entradaEstFloat",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
